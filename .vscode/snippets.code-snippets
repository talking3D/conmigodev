{
    // Place your app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "javascript,typescript",
        "prefix": "log",
        "body": ["console.log('$1');", "$2"],
        "description": "Log output to console"
    },
    "Import": {
        "prefix": "im",
        "description": "ðŸ™ˆ dawaj import!",
        "body": ["import { ${2} } from './${1}';", "$0"]
    },
    "Reducer-Arrow": {
        "prefix": "red",
        "description": "ðŸ™ˆ dawaj array.reduce/arrow!",
        "body": [
            "${1:collection}.reduce((${3:aggr}, ${2:item}) => ${5:newAggr}, ${4:initial})",
            "$0"
        ]
    },
    "Reducer-Return": {
        "prefix": "red-fn",
        "description": "ðŸ™ˆ dawaj array.reduce/return!",
        "body": [
            "${1:collection}.reduce((${3:aggr}, ${2:item}) => {",
            "  return ${5:newAggr}",
            "}, ${4:initial})",
            "$0"
        ]
    },
    "StyledComponent": {
        "prefix": "styl-comp",
        "description": "ðŸ’… styled-components",
        "body": [
            "import styled from 'styled-components';",
            "",
            "export const ${1:Component} = styled.${2:tag}`",
            "  $0color: green;",
            "`;",
            ""
        ]
    },
    "StyledComponentWithProps": {
        "prefix": "styl-comp-props",
        "description": "ðŸ’… styled-components with props",
        "body": [
            "import styled from 'styled-components';",
            "",
            "interface ${TM_FILENAME_BASE}Props {",
            "  ${3:color: string}",
            "}",
            "",
            "export const ${TM_FILENAME_BASE} = styled.${2:tag}<${TM_FILENAME_BASE}Props>`",
            "  $0color: ${props => props.color};",
            "`;",
            ""
        ]
    },
    "FunctionComponent": {
        "prefix": "func-comp-name",
        "description": "ðŸ“¦ function component (custom name)",
        "body": [
            "import React from 'react';",
            "",
            "  ${2:...}",
            "interface ${1:Component}Props {",
            "}",
            "",
            "export const ${1:Component}: React.FC<${1:Component}Props> = (${3:props}) => {",
            "  const ${4:{}} = props",
            "  return <>${5}</>",
            "}",
            "$0"
        ]
    },
    "FunctionComponentFileName": {
        "prefix": "func-comp-by-file",
        "description": "ðŸ“¦ function component (name from file)",
        "body": [
            "import React from 'react';",
            "",
            "interface ${TM_FILENAME_BASE}Props {",
            "  ${2:...}",
            "}",
            "",
            "export const ${TM_FILENAME_BASE}: React.FC = (${3:props}) => {",
            "  const ${4:{}} = props",
            "  return <>${5}</>",
            "}",
            "$0"
        ]
    },
    "FunctionComponentFileNameNoProps": {
        "prefix": "func-comp-by-file-no-props",
        "description": "ðŸ“¦ function component (name from file)",
        "body": [
            "import React from 'react';",
            "",
            "",
            "export const ${TM_FILENAME_BASE}: React.FC = () => {",
            "  return <>${1}</>",
            "}",
            "$0"
        ]
    }
}
